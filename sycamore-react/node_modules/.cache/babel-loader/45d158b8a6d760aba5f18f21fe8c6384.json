{"ast":null,"code":"import { normalizeValues } from './utils';\nexport var calcs = function calcs(values, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var coarseness = options.coarseness || 5;\n  var steps = options.steps || [1, 1];\n  var calcValues = normalizeValues(values); // Calculate the max and min y values.\n\n  var min = calcValues[0].value[1];\n  var max = min;\n  calcValues.forEach(function (value) {\n    var y = value.value[1];\n    min = Math.min(min, y);\n    max = Math.max(max, y);\n  }); // Calculate some reasonable y bounds based on the max and min y values.\n  // This is so values like 87342.12 don't end up being displayed as the\n  // graph axis edge label.\n\n  var delta = max - min;\n  var interval = Number.parseFloat((delta / coarseness).toPrecision(1));\n  max = max - max % interval + interval;\n  min -= min % interval;\n  var bounds = [[calcValues[0].value[0], calcValues[calcValues.length - 1].value[0]], [min, max]];\n  var dimensions = [bounds[0][1] - bounds[0][0], bounds[1][1] - bounds[1][0]]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = bounds[1][1];\n  var yStepInterval = dimensions[1] / steps[1];\n\n  while (y >= bounds[1][0]) {\n    yAxis.push(y);\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = bounds[0][0];\n  var xStepInterval = dimensions[0] / steps[0];\n\n  while (x <= bounds[0][1]) {\n    xAxis.push(x);\n    x += xStepInterval;\n  }\n\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions\n  };\n};","map":null,"metadata":{},"sourceType":"module"}