{"ast":null,"code":"var _Icon$contextTypes;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyledIcon } from '../StyledIcon';\nimport { ThemeContext } from '../contexts';\nvar SC_CHANNEL = '__styled-components';\nvar SC_CHANNEL_SHAPE = PropTypes.shape({\n  subscribe: PropTypes.func,\n  unsubscribe: PropTypes.func\n});\n\nvar Icon = function (_Component) {\n  _inherits(Icon, _Component);\n\n  function Icon(props, context) {\n    _classCallCheck(this, Icon);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));\n\n    _this.state = {};\n    _this.scSubscriptionId = undefined;\n    var styledContext = context[SC_CHANNEL];\n\n    if (styledContext) {\n      var subscribe = styledContext.subscribe;\n      _this.scSubscriptionId = subscribe(function (theme) {\n        return _this.setState({\n          theme: theme\n        });\n      });\n    }\n\n    return _this;\n  }\n\n  Icon.prototype.componentWillUnmount = function componentWillUnmount() {\n    var styledContext = this.context[SC_CHANNEL]; // eslint-disable-line\n\n    if (this.scSubscriptionId) {\n      var unsubscribe = styledContext.unsubscribe;\n      unsubscribe(this.scSubscriptionId);\n    }\n  };\n\n  Icon.prototype.render = function render() {\n    var _props = this.props,\n        a11yTitle = _props.a11yTitle,\n        children = _props.children,\n        color = _props.color,\n        rest = _objectWithoutProperties(_props, ['a11yTitle', 'children', 'color']);\n\n    var stateTheme = this.state.theme;\n    return React.createElement(ThemeContext.Consumer, null, function (theme) {\n      return React.createElement(StyledIcon, _extends({\n        colorProp: color,\n        width: '24px',\n        height: '24px',\n        viewBox: '0 0 24 24',\n        version: '1.1',\n        role: 'img',\n        'aria-label': a11yTitle,\n        theme: stateTheme || theme\n      }, rest), children);\n    });\n  };\n\n  return Icon;\n}(Component);\n\nIcon.contextTypes = (_Icon$contextTypes = {}, _Icon$contextTypes[SC_CHANNEL] = SC_CHANNEL_SHAPE, _Icon$contextTypes);\nexport { Icon };","map":null,"metadata":{},"sourceType":"module"}