{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport { Box } from '../Box';\nimport { withFocus, withForwardRef, withTheme } from '../hocs';\nimport { removeUndefined } from '../../utils/object';\nimport { StyledCheckBox, StyledCheckBoxBox, StyledCheckBoxIcon, StyledCheckBoxContainer, StyledCheckBoxInput, StyledCheckBoxToggle, StyledCheckBoxKnob } from './StyledCheckBox';\nimport { normalizeColor } from '../../utils';\n\nvar CheckBox =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(CheckBox, _Component);\n\n  function CheckBox() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = CheckBox.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        checked = _this$props.checked,\n        disabled = _this$props.disabled,\n        focus = _this$props.focus,\n        forwardRef = _this$props.forwardRef,\n        id = _this$props.id,\n        label = _this$props.label,\n        name = _this$props.name,\n        onChange = _this$props.onChange,\n        reverse = _this$props.reverse,\n        theme = _this$props.theme,\n        toggle = _this$props.toggle,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"checked\", \"disabled\", \"focus\", \"forwardRef\", \"id\", \"label\", \"name\", \"onChange\", \"reverse\", \"theme\", \"toggle\"]);\n\n    var hidden;\n\n    if (disabled && checked) {\n      hidden = React.createElement(\"input\", {\n        name: name,\n        type: \"hidden\",\n        value: \"true\"\n      });\n    }\n\n    var Icon = theme.checkBox.icons.checked;\n    var borderColor = normalizeColor(theme.checkBox.border.color, theme);\n\n    if (checked) {\n      borderColor = normalizeColor(theme.checkBox.color || 'control', theme);\n    }\n\n    var visual = toggle ? React.createElement(StyledCheckBoxToggle, {\n      focus: focus,\n      theme: theme,\n      checked: checked\n    }, React.createElement(StyledCheckBoxKnob, {\n      theme: theme\n    })) : React.createElement(StyledCheckBoxBox, {\n      as: Box,\n      align: \"center\",\n      justify: \"center\",\n      width: theme.checkBox.size,\n      height: theme.checkBox.size,\n      border: {\n        size: theme.checkBox.border.width,\n        color: borderColor\n      },\n      round: theme.checkBox.check.radius,\n      focus: focus,\n      theme: theme,\n      checked: checked\n    }, checked && (Icon ? React.createElement(Icon, {\n      as: StyledCheckBoxIcon,\n      theme: theme\n    }) : React.createElement(StyledCheckBoxIcon, {\n      viewBox: \"0 0 24 24\",\n      preserveAspectRatio: \"xMidYMid meet\",\n      theme: theme\n    }, React.createElement(\"path\", {\n      fill: \"none\",\n      d: \"M6,11.3 L10.3,16 L18,6.2\"\n    }))));\n    var checkBoxNode = React.createElement(StyledCheckBox, {\n      as: Box,\n      align: \"center\",\n      justify: \"center\",\n      theme: theme\n    }, React.createElement(StyledCheckBoxInput, _extends({}, rest, {\n      ref: forwardRef,\n      type: \"checkbox\"\n    }, removeUndefined({\n      id: id,\n      name: name,\n      checked: checked,\n      disabled: disabled,\n      onChange: onChange\n    }), {\n      theme: theme,\n      checked: checked,\n      disabled: disabled\n    })), visual, hidden);\n    var normalizedLabel = typeof label === 'string' ? React.createElement(\"span\", null, label) : label;\n    var first = reverse ? normalizedLabel : checkBoxNode;\n    var second = reverse ? checkBoxNode : normalizedLabel;\n    return React.createElement(StyledCheckBoxContainer, _extends({\n      direction: \"row\",\n      align: \"center\",\n      tag: \"label\",\n      as: Box,\n      reverse: reverse\n    }, removeUndefined({\n      htmlFor: id,\n      disabled: disabled\n    }), {\n      theme: theme,\n      gap: theme.checkBox.gap || 'small',\n      checked: checked,\n      onClick: function onClick(event) {\n        // prevents clicking on the label trigging the event twice\n        // https://stackoverflow.com/questions/24501497/why-the-onclick-element-will-trigger-twice-for-label-element\n        if (event.target.type !== 'checkbox') {\n          event.stopPropagation();\n        }\n      }\n    }), first, second);\n  };\n\n  return CheckBox;\n}(Component);\n\nvar CheckBoxDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  CheckBoxDoc = require('./doc').doc(CheckBox); // eslint-disable-line global-require\n}\n\nvar CheckBoxWrapper = compose(withFocus, withTheme, withForwardRef)(CheckBoxDoc || CheckBox);\nexport { CheckBoxWrapper as CheckBox };","map":null,"metadata":{},"sourceType":"module"}