{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from '../hocs';\nimport { StyledText } from './StyledText';\nvar styledComponents = {\n  span: StyledText\n}; // tag -> styled component\n\nvar Text = function Text(_ref) {\n  var color = _ref.color,\n      tag = _ref.tag,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"color\", \"tag\"]);\n\n  var StyledComponent = styledComponents[tag];\n\n  if (!StyledComponent) {\n    StyledComponent = StyledText.withComponent(tag);\n    styledComponents[tag] = StyledComponent;\n  }\n\n  return React.createElement(StyledComponent, _extends({\n    colorProp: color\n  }, rest));\n};\n\nText.defaultProps = {\n  level: 1,\n  tag: 'span'\n};\nvar TextDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  TextDoc = require('./doc').doc(Text); // eslint-disable-line global-require\n}\n\nvar TextWrapper = compose(withTheme)(TextDoc || Text);\nexport { TextWrapper as Text };","map":null,"metadata":{},"sourceType":"module"}