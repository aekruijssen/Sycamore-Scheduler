{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable react/no-multi-comp */\n\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport getDisplayName from 'recompose/getDisplayName';\nimport { ThemeContext as IconThemeContext } from \"grommet-icons/es6/contexts/ThemeContext\";\nimport { AnnounceContext, ThemeContext } from '../contexts';\nexport var withFocus = function withFocus(WrappedComponent) {\n  var FocusableComponent =\n  /*#__PURE__*/\n  function (_Component) {\n    _inheritsLoose(FocusableComponent, _Component);\n\n    function FocusableComponent() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"mouseActive\", false);\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n        focus: false,\n        wrappedRef: React.createRef()\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"componentDidMount\", function () {\n        var wrappedRef = _this.state.wrappedRef;\n        window.addEventListener('mousedown', _this.handleActiveMouse); // we could be using onFocus in the wrapper node itself\n        // but react does not invoke it if you programically\n        // call wrapperNode.focus() inside componentWillUnmount\n        // see Drop \"this.originalFocusedElement.focus();\" for reference\n\n        /* eslint-disable-next-line react/no-find-dom-node */\n\n        var wrapperNode = findDOMNode(wrappedRef.current);\n\n        if (wrapperNode && wrapperNode.addEventListener) {\n          wrapperNode.addEventListener('focus', _this.setFocus);\n        }\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"componentWillUnmount\", function () {\n        var wrappedRef = _this.state.wrappedRef;\n        window.removeEventListener('mousedown', _this.handleActiveMouse);\n        /* eslint-disable-next-line react/no-find-dom-node */\n\n        var wrapperNode = findDOMNode(wrappedRef.current);\n\n        if (wrapperNode && wrapperNode.addEventListener) {\n          wrapperNode.removeEventListener('focus', _this.setFocus);\n        }\n\n        clearTimeout(_this.focusTimer);\n        clearTimeout(_this.mouseTimer);\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleActiveMouse\", function () {\n        // from https://marcysutton.com/button-focus-hell/\n        _this.mouseActive = true; // this avoids showing focus when clicking around\n\n        clearTimeout(_this.mouseTimer); // empirical number to reset mouseActive after\n        // some time has passed without mousedown\n\n        _this.mouseTimer = setTimeout(function () {\n          _this.mouseActive = false;\n        }, 150);\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"setFocus\", function () {\n        // delay setting focus to avoid interupting events,\n        // 1ms was chosen empirically based on ie11 using Select and TextInput\n        // with and without a FormField.\n        clearTimeout(_this.focusTimer);\n        _this.focusTimer = setTimeout(function () {\n          var focus = _this.state.focus;\n\n          if (!focus && !_this.mouseActive) {\n            _this.setState({\n              focus: true\n            });\n          }\n        }, 1);\n      });\n\n      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"resetFocus\", function () {\n        clearTimeout(_this.focusTimer);\n        _this.focusTimer = setTimeout(function () {\n          var focus = _this.state.focus;\n\n          if (focus) {\n            _this.setState({\n              focus: false\n            });\n          }\n        }, 1);\n      });\n\n      return _this;\n    }\n\n    FocusableComponent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var withFocusRef = nextProps.withFocusRef;\n      var wrappedRef = prevState.wrappedRef;\n      var nextWrappedRef = withFocusRef || wrappedRef;\n\n      if (nextWrappedRef !== wrappedRef) {\n        return {\n          wrappedRef: nextWrappedRef\n        };\n      }\n\n      return null;\n    };\n\n    var _proto = FocusableComponent.prototype;\n\n    _proto.render = function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          _onFocus = _this$props.onFocus,\n          _onBlur = _this$props.onBlur,\n          withFocusRef = _this$props.withFocusRef,\n          rest = _objectWithoutPropertiesLoose(_this$props, [\"onFocus\", \"onBlur\", \"withFocusRef\"]);\n\n      var _this$state = this.state,\n          focus = _this$state.focus,\n          wrappedRef = _this$state.wrappedRef;\n      return React.createElement(WrappedComponent, _extends({\n        ref: wrappedRef,\n        focus: focus\n      }, rest, {\n        onFocus: function onFocus(event) {\n          _this2.setFocus();\n\n          if (_onFocus) {\n            _onFocus(event);\n          }\n        },\n        onBlur: function onBlur(event) {\n          _this2.resetFocus();\n\n          if (_onBlur) {\n            _onBlur(event);\n          }\n        }\n      }));\n    };\n\n    return FocusableComponent;\n  }(Component);\n\n  var ForwardRef = React.forwardRef(function (props, ref) {\n    return React.createElement(FocusableComponent, _extends({}, props, {\n      withFocusRef: ref\n    }));\n  });\n  ForwardRef.displayName = getDisplayName(WrappedComponent);\n  ForwardRef.name = ForwardRef.displayName;\n  return ForwardRef;\n};\nexport var withTheme = function withTheme(WrappedComponent) {\n  var ThemedComponent =\n  /*#__PURE__*/\n  function (_Component2) {\n    _inheritsLoose(ThemedComponent, _Component2);\n\n    function ThemedComponent() {\n      return _Component2.apply(this, arguments) || this;\n    }\n\n    var _proto2 = ThemedComponent.prototype;\n\n    _proto2.render = function render() {\n      var _this$props2 = this.props,\n          withThemeRef = _this$props2.withThemeRef,\n          theme = _this$props2.theme,\n          rest = _objectWithoutPropertiesLoose(_this$props2, [\"withThemeRef\", \"theme\"]);\n\n      return React.createElement(WrappedComponent, _extends({\n        ref: withThemeRef\n      }, rest, {\n        theme: theme\n      }));\n    };\n\n    return ThemedComponent;\n  }(Component);\n\n  var ForwardRef = React.forwardRef(function (props, ref) {\n    return React.createElement(ThemeContext.Consumer, null, function (theme) {\n      return React.createElement(ThemedComponent, _extends({}, props, {\n        theme: theme,\n        withThemeRef: ref\n      }));\n    });\n  });\n  ForwardRef.displayName = getDisplayName(WrappedComponent);\n  ForwardRef.name = ForwardRef.displayName;\n  return ForwardRef;\n};\nexport var withForwardRef = function withForwardRef(WrappedComponent) {\n  var ForwardRefComponent = React.forwardRef(function (props, ref) {\n    return React.createElement(WrappedComponent, _extends({\n      forwardRef: ref\n    }, props));\n  });\n  ForwardRefComponent.displayName = getDisplayName(WrappedComponent);\n  ForwardRefComponent.name = ForwardRefComponent.displayName;\n  return ForwardRefComponent;\n};\nexport var withAnnounce = function withAnnounce(WrappedComponent) {\n  var ForwardRef = React.forwardRef(function (props, ref) {\n    return React.createElement(AnnounceContext.Consumer, null, function (announce) {\n      return React.createElement(WrappedComponent, _extends({}, props, {\n        announce: announce,\n        ref: ref\n      }));\n    });\n  });\n  ForwardRef.displayName = getDisplayName(WrappedComponent);\n  ForwardRef.name = ForwardRef.displayName;\n  return ForwardRef;\n};\nexport var withIconTheme = function withIconTheme(WrappedComponent) {\n  var IconThemeComponent = function IconThemeComponent(props) {\n    return React.createElement(IconThemeContext.Consumer, null, function (iconTheme) {\n      return React.createElement(WrappedComponent, _extends({}, props, {\n        iconTheme: iconTheme\n      }));\n    });\n  };\n\n  IconThemeComponent.displayName = getDisplayName(WrappedComponent);\n  return IconThemeComponent;\n};","map":null,"metadata":{},"sourceType":"module"}