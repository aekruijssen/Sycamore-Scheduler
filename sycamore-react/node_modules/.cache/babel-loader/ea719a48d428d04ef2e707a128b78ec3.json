{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Children, cloneElement, Component } from 'react';\nimport { compose } from 'recompose';\nimport { parseMetricToNum } from '../../utils';\nimport { Box } from '../Box';\nimport { Text } from '../Text';\nimport { withFocus, withTheme } from '../hocs';\n\nvar FormField =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(FormField, _Component);\n\n  function FormField() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = FormField.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    var _this$props = this.props,\n        children = _this$props.children,\n        error = _this$props.error,\n        focus = _this$props.focus,\n        help = _this$props.help,\n        htmlFor = _this$props.htmlFor,\n        label = _this$props.label,\n        style = _this$props.style,\n        theme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"error\", \"focus\", \"help\", \"htmlFor\", \"label\", \"style\", \"theme\"]);\n\n    var formField = theme.formField;\n    var border = formField.border;\n    var contents = children;\n    var borderColor;\n\n    if (focus) {\n      borderColor = 'focus';\n    } else if (error) {\n      borderColor = border && border.error.color || 'status-critical';\n    } else {\n      borderColor = border && border.color || 'border';\n    }\n\n    var abut;\n    var outerStyle = style;\n\n    if (border) {\n      var normalizedChildren = Children.map(children, function (child) {\n        if (child) {\n          return cloneElement(child, {\n            plain: true,\n            focusIndicator: false\n          });\n        }\n\n        return child;\n      });\n      contents = React.createElement(Box, {\n        ref: function ref(_ref) {\n          _this.childContainerRef = _ref;\n        },\n        border: border.position === 'inner' ? _extends({}, border, {\n          side: border.side || 'bottom',\n          color: borderColor\n        }) : undefined\n      }, normalizedChildren);\n      abut = border.position === 'outer' && (border.side === 'all' || border.side === 'horizontal' || !border.side);\n\n      if (abut) {\n        // marginBottom is set to overlap adjacent fields\n        var marginBottom = '-1px';\n\n        if (border.size) {\n          marginBottom = \"-\" + parseMetricToNum(theme.global.borderSize[border.size]) + \"px\";\n        }\n\n        outerStyle = _extends({\n          position: focus ? 'relative' : undefined,\n          marginBottom: marginBottom,\n          zIndex: focus ? 10 : undefined\n        }, style);\n      }\n    }\n\n    return React.createElement(Box, _extends({\n      border: border && border.position === 'outer' ? _extends({}, border, {\n        color: borderColor\n      }) : undefined,\n      margin: abut ? undefined : {\n        bottom: 'small'\n      },\n      style: outerStyle\n    }, rest), label || help ? React.createElement(Box, {\n      margin: {\n        vertical: 'xsmall',\n        horizontal: 'small'\n      },\n      gap: \"xsmall\"\n    }, label ? React.createElement(Text, _extends({\n      tag: \"label\",\n      htmlFor: htmlFor\n    }, formField.label), label) : undefined, help ? React.createElement(Text, _extends({}, formField.help, {\n      color: formField.help.color[theme.dark ? 'dark' : 'light']\n    }), help) : undefined) : undefined, contents, error ? React.createElement(Box, {\n      margin: {\n        vertical: 'xsmall',\n        horizontal: 'small'\n      }\n    }, React.createElement(Text, _extends({}, formField.error, {\n      color: formField.error.color[theme.dark ? 'dark' : 'light']\n    }), error)) : undefined);\n  };\n\n  return FormField;\n}(Component);\n\nvar FormFieldDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  FormFieldDoc = require('./doc').doc(FormField); // eslint-disable-line global-require\n}\n\nvar FormFieldWrapper = compose(withFocus, withTheme)(FormFieldDoc || FormField);\nexport { FormFieldWrapper as FormField };","map":null,"metadata":{},"sourceType":"module"}