{"ast":null,"code":"function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable react/no-find-dom-node */\n\n\nimport React, { createRef, Component } from 'react';\nimport styled from 'styled-components';\nimport { debounce, isNodeAfterScroll, isNodeBeforeScroll, setFocusWithoutScroll } from '../../utils';\nimport { withTheme } from '../hocs';\nimport { Box } from '../Box';\nimport { InfiniteScroll } from '../InfiniteScroll';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { TextInput } from '../TextInput';\nimport { SelectOption } from './SelectOption';\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"SelectContainer__ContainerBox\",\n  componentId: \"sc-1wi0ul8-0\"\n})([\"max-height:inherit;@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"]);\nvar OptionsBox = styled(Box).withConfig({\n  displayName: \"SelectContainer__OptionsBox\",\n  componentId: \"sc-1wi0ul8-1\"\n})([\"scroll-behavior:smooth;\"]);\n\nvar SelectContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(SelectContainer, _Component);\n\n  function SelectContainer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"optionsRef\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"searchRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"selectRef\", createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {\n      search: '',\n      activeIndex: -1\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onChange\", function (event) {\n      _this.setState({\n        search: event.target.value,\n        activeIndex: -1\n      }, function () {\n        var search = _this.state.search;\n\n        _this.onSearch(search);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSearch\", debounce(function (search) {\n      var onSearch = _this.props.onSearch;\n      onSearch(search);\n    }, 300));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"selectOption\", function (option, index) {\n      var _this$props = _this.props,\n          multiple = _this$props.multiple,\n          onChange = _this$props.onChange,\n          options = _this$props.options,\n          selected = _this$props.selected,\n          value = _this$props.value;\n\n      if (onChange) {\n        var nextValue = option;\n        var nextSelected = index;\n\n        if (multiple) {\n          nextValue = [];\n          nextSelected = [];\n          var removed = false;\n          var selectedIndexes = [];\n\n          if (Array.isArray(selected)) {\n            selectedIndexes = selected;\n          } else if (Array.isArray(value)) {\n            selectedIndexes = value.map(function (v) {\n              return options.indexOf(v);\n            });\n          }\n\n          selectedIndexes.forEach(function (selectedIndex) {\n            if (selectedIndex === index) {\n              removed = true;\n            } else {\n              nextValue.push(options[selectedIndex]);\n              nextSelected.push(selectedIndex);\n            }\n          });\n\n          if (!removed) {\n            nextValue.push(option);\n            nextSelected.push(index);\n          }\n        }\n\n        onChange({\n          target: _this.searchRef.current,\n          option: option,\n          value: nextValue,\n          selected: nextSelected\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onNextOption\", function (event) {\n      var options = _this.props.options;\n      var activeIndex = _this.state.activeIndex;\n      event.preventDefault();\n      var index = Math.min(activeIndex + 1, options.length - 1);\n\n      _this.setState({\n        activeIndex: index\n      }, function () {\n        var buttonNode = _this.optionsRef[index];\n        var selectNode = _this.selectRef.current;\n\n        if (isNodeAfterScroll(buttonNode, selectNode) && selectNode.scrollBy) {\n          selectNode.scrollBy(0, buttonNode.getBoundingClientRect().height);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onPreviousOption\", function (event) {\n      var activeIndex = _this.state.activeIndex;\n      event.preventDefault();\n      var index = Math.max(activeIndex - 1, 0);\n\n      _this.setState({\n        activeIndex: index\n      }, function () {\n        var buttonNode = _this.optionsRef[index];\n        var selectNode = _this.selectRef.current;\n\n        if (isNodeBeforeScroll(buttonNode, selectNode) && selectNode.scrollBy) {\n          selectNode.scrollBy(0, -buttonNode.getBoundingClientRect().height);\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onSelectOption\", function (event) {\n      var options = _this.props.options;\n      var activeIndex = _this.state.activeIndex;\n\n      if (activeIndex >= 0) {\n        event.preventDefault(); // prevent submitting forms\n\n        _this.selectOption(options[activeIndex], activeIndex);\n      }\n    });\n\n    return _this;\n  }\n\n  SelectContainer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var options = nextProps.options,\n        value = nextProps.value,\n        onSearch = nextProps.onSearch;\n\n    if (onSearch) {\n      if (prevState.activeIndex === -1 && prevState.search === '' && options && value) {\n        var optionValue = Array.isArray(value) && value.length ? value[0] : value;\n        var activeIndex = options.indexOf(optionValue);\n        return {\n          activeIndex: activeIndex\n        };\n      }\n\n      if (prevState.activeIndex === -1 && prevState.search !== '') {\n        return {\n          activeIndex: 0\n        };\n      }\n    }\n\n    return null;\n  };\n\n  var _proto = SelectContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n    /* eslint-disable-next-line react/prop-types */\n\n\n    var onSearch = this.props.onSearch;\n    var activeIndex = this.state.activeIndex; // timeout need to send the operation through event loop and allow time to the portal\n    // to be available\n\n    setTimeout(function () {\n      var selectNode = _this2.selectRef.current;\n\n      if (onSearch) {\n        var input = _this2.searchRef.current;\n\n        if (input && input.focus) {\n          setFocusWithoutScroll(input);\n        }\n      } else if (selectNode) {\n        setFocusWithoutScroll(selectNode);\n      } // scroll to active option if it is below the fold\n\n\n      if (activeIndex >= 0) {\n        var optionNode = _this2.optionsRef[activeIndex];\n\n        var _selectNode$getBoundi = selectNode.getBoundingClientRect(),\n            containerBottom = _selectNode$getBoundi.bottom;\n\n        var _optionNode$getBoundi = optionNode.getBoundingClientRect(),\n            optionTop = _optionNode$getBoundi.bottom;\n\n        if (containerBottom < optionTop) {\n          optionNode.scrollIntoView();\n        }\n      }\n    }, 0);\n  };\n\n  _proto.render = function render() {\n    var _this3 = this;\n    /* eslint-disable react/prop-types */\n\n\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        disabled = _this$props2.disabled,\n        id = _this$props2.id,\n        name = _this$props2.name,\n        onKeyDown = _this$props2.onKeyDown,\n        onSearch = _this$props2.onSearch,\n        options = _this$props2.options,\n        searchPlaceholder = _this$props2.searchPlaceholder,\n        selected = _this$props2.selected,\n        theme = _this$props2.theme,\n        value = _this$props2.value;\n    /* eslint-enable react/prop-types */\n\n    var _this$state = this.state,\n        activeIndex = _this$state.activeIndex,\n        search = _this$state.search;\n    var customSearchInput = theme.select.searchInput;\n    var SelectTextInput = customSearchInput || TextInput;\n    return React.createElement(Keyboard, {\n      onEnter: this.onSelectOption,\n      onUp: this.onPreviousOption,\n      onDown: this.onNextOption,\n      onKeyDown: onKeyDown\n    }, React.createElement(ContainerBox, {\n      id: id ? id + \"__select-drop\" : undefined,\n      theme: theme\n    }, onSearch && React.createElement(Box, {\n      pad: !customSearchInput ? 'xsmall' : undefined,\n      flex: false\n    }, React.createElement(SelectTextInput, {\n      focusIndicator: !customSearchInput,\n      size: \"small\",\n      ref: this.searchRef,\n      type: \"search\",\n      value: search,\n      placeholder: searchPlaceholder,\n      onChange: this.onChange\n    })), React.createElement(OptionsBox, {\n      flex: \"shrink\",\n      role: \"menubar\",\n      tabIndex: \"-1\",\n      ref: this.selectRef,\n      overflow: \"auto\",\n      theme: theme\n    }, React.createElement(InfiniteScroll, {\n      items: options,\n      step: theme.select.step\n    }, function (option, index) {\n      var isDisabled = Array.isArray(disabled) && disabled.indexOf(index) !== -1;\n      var isSelected = selected === index || Array.isArray(selected) && selected.indexOf(index) !== -1;\n      var isActive = isSelected || activeIndex === index || option && option === value || option && Array.isArray(value) && value.indexOf(option) !== -1;\n      return React.createElement(SelectOption, {\n        ref: function ref(_ref) {\n          _this3.optionsRef[index] = _ref;\n        },\n        disabled: isDisabled || undefined,\n        active: isActive,\n        selected: isSelected,\n        option: option,\n        key: \"option_\" + (name || '') + \"_\" + index,\n        onClick: function onClick() {\n          return _this3.selectOption(option, index);\n        }\n      }, children ? children(option, index, options, {\n        active: isActive,\n        disabled: isDisabled,\n        selected: isSelected\n      }) : React.createElement(Box, {\n        align: \"start\",\n        pad: \"small\"\n      }, React.createElement(Text, {\n        margin: \"none\"\n      }, option !== null && option !== undefined ? option.toString() : undefined)));\n    }))));\n  };\n\n  return SelectContainer;\n}(Component);\n\n_defineProperty(SelectContainer, \"defaultProps\", {\n  children: null,\n  disabled: undefined,\n  id: undefined,\n  multiple: false,\n  name: undefined,\n  onKeyDown: undefined,\n  onSearch: undefined,\n  options: undefined,\n  searchPlaceholder: undefined,\n  selected: undefined,\n  value: ''\n});\n\nvar SelectContainerWrapper = withTheme(SelectContainer);\nexport { SelectContainerWrapper as SelectContainer };","map":null,"metadata":{},"sourceType":"module"}