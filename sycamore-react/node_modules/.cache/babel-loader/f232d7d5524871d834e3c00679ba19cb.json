{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Children, Component } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from '../hocs';\nimport { StyledStack, StyledStackLayer } from './StyledStack';\n\nvar Stack =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Stack, _Component);\n\n  function Stack() {\n    return _Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Stack.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        anchor = _this$props.anchor,\n        children = _this$props.children,\n        fill = _this$props.fill,\n        guidingChild = _this$props.guidingChild,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"anchor\", \"children\", \"fill\", \"guidingChild\"]); // make all children but the first absolutely positioned\n\n\n    var guidingIndex = guidingChild;\n\n    if (guidingIndex === 'first' || !guidingIndex) {\n      guidingIndex = 0;\n    } else if (guidingIndex === 'last') {\n      guidingIndex = React.Children.count(children) - 1;\n    }\n\n    var childIndex = 0;\n    var styledChildren = Children.map(children, function (child) {\n      if (child) {\n        var layer;\n\n        if (childIndex === guidingIndex) {\n          layer = React.createElement(StyledStackLayer, {\n            guiding: true,\n            fillContainer: fill\n          }, child);\n        } else {\n          layer = React.createElement(StyledStackLayer, {\n            anchor: anchor\n          }, child);\n        }\n\n        childIndex += 1;\n        return layer;\n      }\n\n      return child;\n    });\n    return React.createElement(StyledStack, _extends({\n      fillContainer: fill\n    }, rest), styledChildren);\n  };\n\n  return Stack;\n}(Component);\n\nvar StackDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  StackDoc = require('./doc').doc(Stack); // eslint-disable-line global-require\n}\n\nvar StackWrapper = compose(withTheme)(StackDoc || Stack);\nexport { StackWrapper as Stack };","map":null,"metadata":{},"sourceType":"module"}