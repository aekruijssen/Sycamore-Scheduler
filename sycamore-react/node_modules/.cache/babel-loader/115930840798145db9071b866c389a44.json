{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Component } from 'react';\nimport { ThemeContext as IconThemeContext } from \"grommet-icons/es6/contexts/ThemeContext\";\nimport { compose } from 'recompose';\nimport { ResponsiveContext, ThemeContext } from '../../contexts';\nimport { base as baseTheme } from '../../themes/base';\nimport { colorIsDark, deepMerge, getBreakpoint, normalizeColor } from '../../utils';\nimport { withIconTheme } from '../hocs';\nimport { StyledGrommet } from './StyledGrommet'; // grommet-icons isn't aware of the grommet dark background context.\n// Here, we reduce the grommet theme colors to the correct flat color\n// namespace for grommet-icons.\n\nvar reduceIconTheme = function reduceIconTheme(iconTheme, dark) {\n  var result = _extends({}, iconTheme, {\n    colors: _extends({}, iconTheme.colors)\n  });\n\n  Object.keys(result.colors).forEach(function (key) {\n    if (typeof result.colors[key] === 'object') {\n      result.colors[key] = normalizeColor(result.colors[key][dark ? 'dark' : 'light'], {\n        dark: dark,\n        global: {\n          colors: result.colors\n        }\n      });\n    } else {\n      result.colors[key] = normalizeColor(result.colors[key], {\n        dark: dark,\n        global: {\n          colors: result.colors\n        }\n      });\n    }\n  });\n  return result;\n};\n\nvar Grommet =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Grommet, _Component);\n\n  function Grommet() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onResize\", function () {\n      var _this$state = _this.state,\n          theme = _this$state.theme,\n          responsive = _this$state.responsive;\n      var breakpoint = getBreakpoint(window.innerWidth, theme);\n\n      if (breakpoint !== responsive) {\n        _this.setState({\n          responsive: breakpoint\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  Grommet.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var iconTheme = nextProps.iconTheme,\n        theme = nextProps.theme;\n    var stateTheme = prevState.theme,\n        themeProp = prevState.themeProp,\n        iconThemeProp = prevState.iconThemeProp;\n    var nextTheme;\n\n    if (theme && (theme !== themeProp || iconTheme !== iconThemeProp)) {\n      // in case the supplied theme has global.colors but not icon.colors,\n      // pre-merge the current base icon colors with the new theme colors.\n      var iconColoredTheme = theme;\n\n      if (!theme.icon || !theme.icon.colors) {\n        iconColoredTheme = _extends({}, theme);\n        iconColoredTheme.icon = _extends({}, theme.icon || {});\n        iconColoredTheme.icon.colors = deepMerge(baseTheme.icon.colors, (theme.global || {}).colors);\n      }\n\n      nextTheme = deepMerge(baseTheme, iconColoredTheme);\n    } else if (!theme && (themeProp || !stateTheme)) {\n      nextTheme = baseTheme;\n    }\n\n    if (nextTheme) {\n      var _ref = nextTheme.global || baseTheme.global,\n          colors = _ref.colors;\n\n      var color = colors.background;\n      var dark = color ? colorIsDark(color) : false;\n      var lightIconTheme = deepMerge(iconTheme, nextTheme.icon);\n      var iconThemes = {\n        dark: reduceIconTheme(deepMerge(lightIconTheme, {\n          color: colors.text.dark\n        }), true),\n        light: reduceIconTheme(lightIconTheme, false)\n      };\n      return {\n        theme: _extends({}, nextTheme, {\n          dark: dark,\n          icon: dark ? iconThemes.dark : iconThemes.light,\n          iconThemes: iconThemes\n        }),\n        themeProp: theme,\n        iconThemeProp: iconTheme\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = Grommet.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    window.removeEventListener('resize', this.onResize);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\"]);\n\n    delete rest.theme;\n    var _this$state2 = this.state,\n        responsive = _this$state2.responsive,\n        theme = _this$state2.theme;\n    return React.createElement(ThemeContext.Provider, {\n      value: theme\n    }, React.createElement(IconThemeContext.Provider, {\n      value: theme.icon\n    }, React.createElement(ResponsiveContext.Provider, {\n      value: responsive\n    }, React.createElement(StyledGrommet, _extends({}, rest, {\n      theme: theme\n    }), children))));\n  };\n\n  return Grommet;\n}(Component);\n\nvar GrommetDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  GrommetDoc = require('./doc').doc(Grommet); // eslint-disable-line global-require\n}\n\nvar GrommetWrapper = compose(withIconTheme)(GrommetDoc || Grommet);\nexport { GrommetWrapper as Grommet };","map":null,"metadata":{},"sourceType":"module"}