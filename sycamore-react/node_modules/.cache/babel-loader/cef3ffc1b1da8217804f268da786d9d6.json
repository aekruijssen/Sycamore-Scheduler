{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { backgroundPropType, genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Meter) {\n  var DocumentedMeter = describe(Meter).availableAt(getAvailableAtBadge('Meter')).description('A graphical meter.').usage(\"import { Meter } from 'grommet';\\n<Meter />\");\n  DocumentedMeter.propTypes = _extends({}, genericProps, {\n    background: backgroundPropType.defaultValue({\n      color: 'light-2',\n      opacity: 'medium'\n    }),\n    round: PropTypes.bool.description('Whether to round the line ends').defaultValue(false),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'full']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    thickness: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the Meter.').defaultValue('medium'),\n    type: PropTypes.oneOf(['bar', 'circle']).description('The visual type of meter.').defaultValue('bar'),\n    values: PropTypes.arrayOf(PropTypes.shape({\n      color: PropTypes.string,\n      highlight: PropTypes.bool,\n      label: PropTypes.string.isRequired,\n      // for accessibility\n      onClick: PropTypes.func,\n      onHover: PropTypes.func,\n      value: PropTypes.number.isRequired\n    })).description(\"Array of value objects describing the data.\\n      'value' is the actual numeric value.\\n      'label' is a text string describing it.\\n      'color' indicates the color name to use. If not specified a default one\\n      will be chosen.\\n      'onClick' will be called when the user clicks on it.\\n      Set 'highlight' to call attention to it.\\n      'onHover' will be called with a boolean argument indicating when the\\n      user hovers onto or away from it.\")\n  });\n  return DocumentedMeter;\n};","map":null,"metadata":{},"sourceType":"module"}