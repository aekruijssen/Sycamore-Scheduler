{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { ThemeContext as IconThemeContext } from \"grommet-icons/es6/contexts/ThemeContext\";\nimport { FocusedContainer } from '../FocusedContainer';\nimport { Keyboard } from '../Keyboard';\nimport { withTheme } from '../hocs';\nimport { backgroundIsDark } from '../../utils';\nimport { StyledLayer, StyledContainer, StyledOverlay } from './StyledLayer';\n\nvar LayerContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(LayerContainer, _Component);\n\n  function LayerContainer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"state\", {});\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"containerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"layerRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"makeLayerVisible\", function () {\n      /* eslint-disable-next-line react/no-find-dom-node */\n      var node = findDOMNode(_this.layerRef.current || _this.containerRef.current);\n\n      if (node && node.scrollIntoView) {\n        node.scrollIntoView();\n      }\n    });\n\n    return _this;\n  }\n\n  LayerContainer.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    var theme = nextProps.theme;\n    var stateTheme = prevState.theme; // set dark context based on layer background, not Layer's container.\n\n    var dark = theme.dark;\n\n    if (theme.layer.background) {\n      dark = backgroundIsDark(theme.layer.background, theme);\n    }\n\n    if (!dark !== !theme.dark) {\n      if (!stateTheme || dark !== stateTheme.dark) {\n        return {\n          theme: _extends({}, theme, {\n            dark: dark,\n            icon: dark ? theme.iconThemes.dark : theme.iconThemes.light\n          })\n        };\n      }\n    } else if (stateTheme) {\n      return {\n        theme: undefined\n      };\n    }\n\n    return null;\n  };\n\n  var _proto = LayerContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var position = this.props.position;\n\n    if (position !== 'hidden') {\n      this.makeLayerVisible();\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var position = this.props.position;\n\n    if (prevProps.position !== position && position !== 'hidden') {\n      this.makeLayerVisible();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        id = _this$props.id,\n        modal = _this$props.modal,\n        onClickOutside = _this$props.onClickOutside,\n        onEsc = _this$props.onEsc,\n        plain = _this$props.plain,\n        position = _this$props.position,\n        responsive = _this$props.responsive,\n        propsTheme = _this$props.theme,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"id\", \"modal\", \"onClickOutside\", \"onEsc\", \"plain\", \"position\", \"responsive\", \"theme\"]);\n\n    var stateTheme = this.state.theme;\n    var theme = stateTheme || propsTheme;\n    var content = React.createElement(StyledContainer, _extends({\n      id: id\n    }, rest, {\n      theme: theme,\n      position: position,\n      plain: plain,\n      responsive: responsive,\n      ref: this.containerRef\n    }), children);\n\n    if (modal) {\n      content = React.createElement(StyledLayer, {\n        id: id,\n        plain: plain,\n        position: position,\n        theme: theme,\n        responsive: responsive,\n        tabIndex: \"-1\",\n        ref: this.layerRef\n      }, React.createElement(StyledOverlay, {\n        plain: plain,\n        onMouseDown: onClickOutside,\n        responsive: responsive,\n        theme: theme\n      }), content);\n    }\n\n    if (onEsc) {\n      content = React.createElement(Keyboard, {\n        target: \"document\",\n        onEsc: onEsc\n      }, content);\n    }\n\n    if (modal) {\n      content = React.createElement(FocusedContainer, {\n        hidden: position === 'hidden',\n        restrictScroll: true\n      }, React.createElement(IconThemeContext.Provider, {\n        value: theme.icon\n      }, content));\n    }\n\n    return content;\n  };\n\n  return LayerContainer;\n}(Component);\n\n_defineProperty(LayerContainer, \"defaultProps\", {\n  full: false,\n  margin: 'none',\n  modal: true,\n  position: 'center'\n});\n\nvar LayerContainerWrapper = withTheme(LayerContainer);\nexport { LayerContainerWrapper as LayerContainer };","map":null,"metadata":{},"sourceType":"module"}