{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(TextInput) {\n  var DocumentedTextInput = describe(TextInput).availableAt(getAvailableAtBadge('TextInput')).description('A text input field with optional suggestions.').usage(\"import { TextInput } from 'grommet';\\n<TextInput id='item' name='item' />\");\n  DocumentedTextInput.propTypes = {\n    dropAlign: PropTypes.shape({\n      top: PropTypes.oneOf(['top', 'bottom']),\n      bottom: PropTypes.oneOf(['top', 'bottom']),\n      right: PropTypes.oneOf(['left', 'right']),\n      left: PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop.').defaultValue({\n      top: 'top',\n      left: 'left'\n    }),\n    dropTarget: PropTypes.object.description(\"Target where any suggestions drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the TextInput itself by default.\"),\n    id: PropTypes.string.description('The id attribute of the input.'),\n    focusIndicator: PropTypes.bool.description('Whether the plain text input should receive a focus outline.'),\n    messages: PropTypes.shape({\n      enterSelect: PropTypes.string,\n      suggestionsCount: PropTypes.string,\n      suggestionsExist: PropTypes.string,\n      suggestionIsOpen: PropTypes.string\n    }).description('Custom messages for TextInput. Used for accessibility by screen readers.').defaultValue({\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n    }),\n    name: PropTypes.string.description('The name attribute of the input.'),\n    onChange: PropTypes.func.description('Function that will be called when the user types in the input.'),\n    onSelect: PropTypes.func.description(\"Function that will be called when the user selects a suggestion.\\nThe suggestion contains the object chosen from the supplied suggestions.\"),\n    onSuggestionsOpen: PropTypes.func.description('Function that will be called when the suggestions drop is opened.'),\n    onSuggestionsClose: PropTypes.func.description('Function that will be called when the suggestions drop is closed.'),\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).description('Placeholder to use when no value is provided.'),\n    plain: PropTypes.bool.description(\"Whether this is a plain input with no border or padding.\\nOnly use this when the containing context provides sufficient affordance\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the TextInput.'),\n    suggestions: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({\n      label: PropTypes.node,\n      value: PropTypes.any\n    }), PropTypes.string])).description(\"Suggestions to show. It is recommended to avoid showing too many\\nsuggestions and instead rely on the user to type more.\"),\n    value: PropTypes.string.description('What text to put in the input.')\n  };\n  return DocumentedTextInput;\n};","map":null,"metadata":{},"sourceType":"module"}