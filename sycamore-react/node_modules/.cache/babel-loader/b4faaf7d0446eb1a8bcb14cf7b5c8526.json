{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { genericProps, getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(Tabs) {\n  var DocumentedTabs = describe(Tabs).availableAt(getAvailableAtBadge('Tabs')).description('A tabular view component.').usage(\"import { Tabs, Tab } from 'grommet';\\n<Tabs>\\n  <Tab title='Tab 1'>...</Tab>\\n  <Tab title='Tab 2'>...</Tab>\\n</Tabs>\");\n  DocumentedTabs.propTypes = _extends({}, genericProps, {\n    activeIndex: PropTypes.number.description(\"Active tab index. If specified, Tabs will be a controlled component. This means that future\\ntab changes will not work unless you subscribe to onActive function and update activeIndex\\naccordingly.\"),\n    children: PropTypes.node.description('Array of Tab.').isRequired,\n    justify: PropTypes.oneOf(['start', 'center', 'end']).description('How to align the tabs along the main axis.').defaultValue('center'),\n    messages: PropTypes.shape({\n      tabContents: PropTypes.string\n    }).description('Custom messages for Tabs. Used for accessibility by screen readers.').defaultValue({\n      tabContents: 'Tab Contents'\n    }),\n    onActive: PropTypes.func.description(\"Function that will be called with the active tab index when the currently active\\ntab changes.\")\n  });\n  return DocumentedTabs;\n};","map":null,"metadata":{},"sourceType":"module"}